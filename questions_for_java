Примитивные и ссылочные типы данных. Как они хранятся в памяти?<br>

String pool, Integer pool: для чего нужны?<br>
ООП 
Принципы ООП. Что означают, где используются. Желательно уметь указать, где в коде использован тот или иной принцип
Наследование
Полиморфизм
Инкапсуляция
Абстракция
SOLID: чуть-чуть про каждую из букв, что означают,  для чего нужны
Класс Object 
equals и hashCode. Для чего нужны? Контракт между ними.
Абстрактные классы и Интерфейсы. Что когда применять? Для чего нужны? Их ограничения.
Дефолтные методы в интерфейсах. 
Переопределение перегрузка методов. Нужно представлять, как примерно работает? Для чего нужно?
ООП паттерны основные. Какие бывают? (3 типа). По 2-3 примера основных популярных паттернов.
Исключения. Иерархия: Throwable, Exception, RuntimeException, Error
checked vs uncheckedtry/catch/finally AutoClosable и try-with-resources

Коллекции 

Дженерики. Что такое, для чего нужно?

Умение написать Generic класс/метод

Почему нельзя примитивы?

Стирание типов

Wildcards (?, extends,…)

Иерархия коллекций 

Почему Map в отдельности?

Какой интерфейс от каких наследуется?

List: ArrayList знать как устроен внутри

знать про capacity и увеличение размера

знать про то, что массив хорошо ложится в кэш. Почему?

LinkedListLinkedList vs ArrayList: сложность операций. Знать про то, что массив хорошо ложиться в кэш, а LinkedList Node’ы плохо. Почему? Что когда лучше использовать (почти всегда лучше ArrayList)

Set. Идея коллекции, для чего нужна? Реализации (TreeSet, HashSet, LinkedHashSet). Нужно понимать сложность каждой операции для каждой реализации.

Map. Идея коллекции, для чего нужна? Реализации (TreeMap, HashMap, LinkedHashMap). Нужно знать сложность каждой операции для каждой реализации.

 Коллизии в HashMap, как разрешаются? Знать, что бакет может перестроиться в красно чёрное дерево, если будет 8+ коллизий в бакете (ADVANCED)

StreamApi 

Знание основных операторов (stream, filter, map, collect, flatMap, count, sum)

Знать, что есть терминальные операторы (collect, sum, count), а есть промежуточные

Знать, что все операции выполняются лениво (желательно знать или уметь распознать примеры, когда это роляет. Например, из-за ленивого выполнения происходит что-то неочевидное)

Знание механизмов Queue, Deque, Stack

Желательно знать про PriorityQueue (куча), также ассимптотики

JVM

 JVM, JRE, JDK

Heap vs Stack

GC. Что это, для чего нужен? Примерно как работает (поколения)

int[10][1000] vs int[1000][10]. Знать, как хранятся объекты в памяти. У массивов и объектов есть мета информация (header’ы в куче). 10 массивов по 1000 лучше, т.к. 1000 элементов хранятся в кэше последовательно, при этом всего 10 хэдеров. В случае 1000 массивов по 10 элементов - плохо хранятся в кэше, при этом в памяти храним много хэдеров.

Многопоточка
Как запустить задачу в отдельном потоке

Отличия Thread vs Runnable

Отличия Thread.run vs Thread.start

synchronized Что это такое? 

Знать на чём может быть монитор (класс или объект)

synchronized блоки или synchronized методы?

Поведение метода с synchronized, когда приходят несколько потоков

Знать, как сделать Dead Lock, используя 2 вложенных synchronized (популярный вопрос)

wait/notify: что это такое? На чём можно вызывать? Желательно умение применять 

знание, что можно вызывать только из synchronized контекста (почему?)

Semaphore, CountDownLatch, Mutex (просто знание, что такие вещи существуют)

ThreadLocal (что такое, для чего)

volatile (что это, для чего?)

Atomic Что, для чего?CAS

ThreadPool. В чём идея, почему не создавать просто кучу потоков? Какие варианты реализации бывают

ForkJoinPool (ADVANCED), можно просто знать про существование и примерно зачем это нужно (планировщик задач)

В идеале знать Java Memory Model и happend before, но это прям advanced. Упомянуть уже будет плюсом

Concurrent коллекции (ADVANCED). CopyOnWriteArrayList, ConcurrentHashMap, ArrayBlockingQueue, LinkedBlockingQueue

Тесты
Умение использовать JUnit5 и писать тесты

Как писать юниты? TDDArrange, act, assert

Parameterized тесты

Unit test vs Integration Test (пирамида тестирования в идеале)

SpringBootTest (поднимается контекст)

TestContainers (знать что это такое и для чего)

Как писать тестируемый код? (интерфейсы, мало приватных методов)

Моки. Зачем? Когда использовать моки?

Mock, SpyMockito

Spring
DI, IOC: Что это, для чего? DI vs IOC

Контекст приложения

Scope бинов (какие бывают)

Жизненный цикл бинов

 PreDestroy, PostConstruct

Repository, Service, Controller, MVC

Зачем нужен SpringBoot?

Сервера приложений (Tomcat и другие). Для чего нужны? что там есть?

Web Server vs Application Server

Профили. Зачем нужны? Как работать? (application-local, application-dev, application-test, application-prod yaml конфигурации, в зависимости от среды)

Аннотация Profile

Scheduled, Async (знать что это такое, как работают)

Spring Data JPA 

Transactional. Как работает? (Паттерн прокси)

Уровни изоляции транзакций (знать что такое вообще)

Propogation (не нужно знать все варианты). Знать про возможность указать исключение, на которые нужно реагировать, или которые стоит игнорировать

Немного про Hibernate (например про кэши)

JpaRepository, CrudRepository

OneToMany, ManyToMany, ManyToMany

Lazy Read

DATABASE
SQL 

Select

JOIN (LEFT, RIGHT, CROSS, FULL)

GROUP BY, HAVING

Индексы для чего нужны? стоит хорошо знать b-tree

Оптимизация запросов (ADVANCED) План запросов

EXPLAIN ANALYZE 

Оптимизация запросов

MVCC (ADVANCED)

Transaction Isolation Level (ADVANCED) Какие есть аномалии и в какой уровне решаются?

Планировщик запросов (ADVANCED)

Other
Linux (основные команды)

CI/CD - что такое, для чего

Виртуализация. Что такое зачем? Docker

Системы сборки (Gradle, Maven)

Git:

что это , для чего? банально fetch vs pull, merge vs rebase, revert vs reset

HEAD

Untracked, unmodified, modified, staged

Scrum (что такое для чего?)

Архитектурные паттерны (ADVANCED)

Сети:

 TCP, UDP (что такое, что где используется)

HTTP

REST:

Что такое REST, для чего?

Как составлять url запросы

какие методы и где стоит использовать

Kubernetes (ADANCED): что это, для чего?
